// 25.1.3 - To be able to validate the request body using the rules sent by the router
//          we will first import the validator check from express-validator package.
const {validationResult} = require ('express-validator/check');

// 10.2.10: in the controller, we will use the domain object Post to to perform
//          Create, Read, Update and Delete (CRUD) operations on the db
const Post = require('../models/post');

// 24.1.9 Once this controller method reference is called form the router, we can then return a response in a json format.
exports.getPosts= (req,res, next) => {
  //   24.1.10 we will return a status and a response. The default is 200 so the status can be omitted, but it was added here
    // to show that option , and soon we will return codes different than 200.

 // 10.2.11: We will use the static fetchAll method of Post to get all rows from the post table
    Post.fetchAll()
        .then (results => res.status(200).json(results.rows))
        .catch((err) => {
            console.log(err);
            res.status(500).json({status: "failed"})
        })
};

exports.createPosts = (req,res, next) => {
    // 25.1.4 - Now, before processing the incoming post request, we will perform validation
    //             which were sent by the router, and return an error status and message , if validations failed
    const errors = validationResult(req);
    if (! errors.isEmpty()) {
        return res
            .status(422)
            .json({
                message: 'request validations failed',
                errors: errors.array()
            });
    }
    // 24.2.3 : We are expecting the client to send a request with json body which has a title and content fields.
    //          So, here we are extracting that information from the body. Since the body parser was already configured
    //          to parse json format of request bodies, these should be available here.
    const title = req.body.title ;
    const content = req.body.content;

    //10.2.12 : Here, we can now call the Post class save method, after instantiating a Post a class with the values
    //          we want to use to insert a new record with. id and createdAT are auto-generated by the db, therefore,
    //          here null are sent as values for them.

    const post = new Post(null, title, content, 'dummyURL', 'Yair', null);

    post.save()
        .then (() => res.status(201).json({status: 'success'}))
        .catch((err) => {
            console.log(err);
            res.status(500).json({status: 'failed'})
    });
};